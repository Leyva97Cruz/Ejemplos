<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAABfESURBVHhe7Z17cFTXfcelq9XdRRGgx74fEkgY9w9P6B9p
        M01mzEzH42SacZ1OYnuayZgmjh2nzYBbtzixGzOpDWk8xcY2BgeMLiuEkEBIAmzaTg1M2zH2pAN2Upcm
        OKZAC7TEBmOHhzFi+/udvefuuXfv3b167iJ9d+YOYvc+zvnc3+/+XuecW1ODDwiAAAiAAAiAAAiAAAiA
        AAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiA
        AAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiA
        AAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiA
        AAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAhMBoHG9qG5
        evtQuzx3MLnrszXp/cHJuBbOCQI3BIH6tt03h9J7VoUyu96aldmT06PPH6SGL+LGh9K7T/B3wdSOd0Op
        7c9AWW6IW4pGTiSBUOLlRawEcguEV+fo/F8wFeSK/F5PdPP3gxN5bZwLBKqSgFCK5MAdliuV2vFvqpK4
        /a3NXsoKcicfE8zsGQw0rfx6VXYOjQKB8RBg5SCX6nwwOXBVa/zGw+xeNWR256KxLSPp8PpcW+va3IJo
        NjcvvPFye/jFS3H6bk5ygNyswev1sZ88R67YsrzbNZira/zLH4ynLTgWBKqKgFQO1UI0JQeuzItsvN4Z
        2fTJ/Jb1P+0IG090RIwv3BQ2lnRGup/ujGQPLohs/jgReekDp2WBklTV7UVjxksgmNpzTzA1dJUFna1G
        ItolrEWm+ZnX21qNmNf5WWE6o9kj88KbTs1J9I9IRakPr8nV1v32GTpu7njbhuNBoCoI1DU98vlQangk
        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
        Ro247cdtVYLvvLIQF+6Pun/BgmQP8IOg4GZlebVGfKYLAVOQ5Qtpip6q5frJRTLFxeDzHGVBNZ/GhYlR
        ZQRXvY4ppHzsORb8cm3g36XAsqCWysDZnvYu5+a4Q/bHVHrhSuUVxbCsA/1fvPed+yquTxZJ7ofCoZ87
        doPso95YN7+8VDfMJ+dIKVck727RrEGfgb8qoNLH94NSLdzx317H2B4I5Fq67UdMjhdcMbZMBRdKWkPT
        OloKIh4UJdw3P33APlVGgJ+043ENVMGZqKemGg9JxfMTx6huTik3q1wckrcGhZQ3P0D4O1tal4N8U2mk
        BRH7KFkwr+C+ykQAzSnpj48juFQzXyQkEzbUgoTsihIDCNemI2as8XMnad+8NaOYqmS/y8QhpkJ8KNsh
        071KluuaeLhwbGK6WEKxlOo6K5CfNmOfKiVgxgiWe+TnKa12xZYSVXzz8XRXDHUpuCm8TJBMPZ/1c17V
        XVTjEO6bOHfY2Gu6T4VMlUeMo7piqrBLV46Vlq+nKogtC0ZtL1ds9NMn7FMhAuN92qnZnokalqL6/sJl
        UgJfP1Vq1T1jQRZukczQ2VeKLyiIRxwiLEIh5TuiPkDMeOMo99vZd1FjoetOFJMKiQcu60jLnuUn4mis
        iJo1Gs1xXuQdwfk54ebkU8Vmhs3YW+6u2WIHrlOIgiC5bBx0k/VgK8Jt9ROHmC6TVR/ic5W7Pn6fRgRE
        7SI/vER5mpJLQ8LkR1lkFocFeCKw2IqVSsbLal+ZuEK2YSLjEFucRYo2Ef3EOW5AAqWUxctVULM6ftyf
        cliU4Nw21EV15fykob3iEOf1y9VD5P62FK/PVHW5vuL3G5iAQ1k8x2XZA+ry7k8pJOq5nFV3v+lby4Io
        w2bGWw/hc5rXP+q3jnMD33o0fbQESuXybZVyytg4hXE0VkUNzkX6NB+ci0q6Ob4rn3Kl65SLd5xxiFef
        /cYho2WG/UHAIsBCZh8iLtK0PNTEFOjyga0jOD9rq0izUnCArc7e85FSHm0cMpF1HIgHCNgICEtiZouE
        sNvTqefKPvHVkcQePn7+GvmaiB9h9huHoNoNYZ5SAnmLwiN7jWV+6wBewbmz4WpauZxgKxmxc34C+ymF
        hIuBgF8CpYLzoqyTUmWfiuHzfvuA/UAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAA
        BEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAA
        BEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAA
        BEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAA
        BEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABEAABGYogf8H95Rhnm9JXb0A
        AAAASUVORK5CYII=
</value>
  </data>
  <metadata name="lineShape2.Bounds" type="System.Drawing.Rectangle, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>310, 206, 407, 0</value>
  </metadata>
  <metadata name="lineShape2.Location" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>310, 206</value>
  </metadata>
  <metadata name="lineShape2.Size" type="System.Drawing.Size, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>407, 0</value>
  </metadata>
  <metadata name="lineShape1.Bounds" type="System.Drawing.Rectangle, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>310, 100, 407, 0</value>
  </metadata>
  <metadata name="lineShape1.Location" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>310, 100</value>
  </metadata>
  <metadata name="lineShape1.Size" type="System.Drawing.Size, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>407, 0</value>
  </metadata>
</root>